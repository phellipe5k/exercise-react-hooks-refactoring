{"ast":null,"code":"var _jsxFileName = \"/home/phellipe/Documentos/Trybe/Bloco 18/react-hooks-exercises/src/GameBoard.js\";\nimport React, { useContext } from 'react';\nimport GameCell from './GameCell';\nimport './GameBoard.css';\nimport TicTacToeContext from './context/TicTacToeContext';\n\nconst GameBoard = ({\n  gameState\n}) => {\n  const {\n    game,\n    setGame\n  } = useContext(TicTacToeContext);\n\n  const toggleActivePlayer = () => {\n    const {\n      activePlayer\n    } = game;\n    if (activePlayer === 1) return 2;\n    return 1;\n  };\n\n  const onClick = cellClicked => {\n    const newState = [...game.gameBoard];\n    let newActivePlayer = game.activePlayer;\n\n    if (game.gameBoard[cellClicked] === 0) {\n      newState[cellClicked] = game.activePlayer;\n      newActivePlayer = toggleActivePlayer();\n    } else newState[cellClicked] = game.gameBoard[cellClicked];\n\n    setGame({\n      activePlayer: newActivePlayer,\n      gameBoard: newState\n    });\n  };\n\n  const {\n    gameBoard\n  } = game;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, gameBoard.map((playerId, i) => /*#__PURE__*/React.createElement(GameCell, {\n    id: i,\n    key: i,\n    onClick: () => onClick(i),\n    content: playerId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default GameBoard;","map":{"version":3,"sources":["/home/phellipe/Documentos/Trybe/Bloco 18/react-hooks-exercises/src/GameBoard.js"],"names":["React","useContext","GameCell","TicTacToeContext","GameBoard","gameState","game","setGame","toggleActivePlayer","activePlayer","onClick","cellClicked","newState","gameBoard","newActivePlayer","map","playerId","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,iBAAP;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAEnC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBN,UAAU,CAACE,gBAAD,CAApC;;AAEA,QAAMK,kBAAkB,GAAG,MAAM;AAC/B,UAAM;AAAEC,MAAAA;AAAF,QAAmBH,IAAzB;AACA,QAAIG,YAAY,KAAK,CAArB,EAAwB,OAAO,CAAP;AACxB,WAAO,CAAP;AACD,GAJD;;AAMA,QAAMC,OAAO,GAAIC,WAAD,IAAiB;AAC/B,UAAMC,QAAQ,GAAG,CAAC,GAAGN,IAAI,CAACO,SAAT,CAAjB;AACA,QAAIC,eAAe,GAAGR,IAAI,CAACG,YAA3B;;AAEA,QAAIH,IAAI,CAACO,SAAL,CAAeF,WAAf,MAAgC,CAApC,EAAuC;AACrCC,MAAAA,QAAQ,CAACD,WAAD,CAAR,GAAwBL,IAAI,CAACG,YAA7B;AACAK,MAAAA,eAAe,GAAGN,kBAAkB,EAApC;AACD,KAHD,MAGOI,QAAQ,CAACD,WAAD,CAAR,GAAwBL,IAAI,CAACO,SAAL,CAAeF,WAAf,CAAxB;;AACPJ,IAAAA,OAAO,CACP;AACAE,MAAAA,YAAY,EAAEK,eADd;AAEAD,MAAAA,SAAS,EAAED;AAFX,KADO,CAAP;AAKD,GAbD;;AAcA,QAAM;AAAEC,IAAAA;AAAF,MAAgBP,IAAtB;AAEE,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,SAAS,CAACE,GAAV,CAAc,CAACC,QAAD,EAAWC,CAAX,kBACb,oBAAC,QAAD;AACE,IAAA,EAAE,EAAEA,CADN;AAEE,IAAA,GAAG,EAAEA,CAFP;AAGE,IAAA,OAAO,EAAE,MAAMP,OAAO,CAACO,CAAD,CAHxB;AAIE,IAAA,OAAO,EAAED,QAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF;AAYH,CAtCD;;AAwCA,eAAeZ,SAAf","sourcesContent":["import React, { useContext } from 'react';\nimport GameCell from './GameCell';\nimport './GameBoard.css';\nimport TicTacToeContext from './context/TicTacToeContext';\n\nconst GameBoard = ({ gameState }) => {\n\n  const { game, setGame } = useContext(TicTacToeContext);\n\n  const toggleActivePlayer = () => {\n    const { activePlayer } = game;\n    if (activePlayer === 1) return 2;\n    return 1;\n  }\n\n  const onClick = (cellClicked) => {\n    const newState = [...game.gameBoard];\n    let newActivePlayer = game.activePlayer;\n\n    if (game.gameBoard[cellClicked] === 0) {\n      newState[cellClicked] = game.activePlayer;\n      newActivePlayer = toggleActivePlayer();\n    } else newState[cellClicked] = game.gameBoard[cellClicked];\n    setGame(\n    { \n    activePlayer: newActivePlayer,\n    gameBoard: newState, \n    })\n  }\n  const { gameBoard } = game;\n\n    return (\n      <div className=\"game-board\">\n        {gameBoard.map((playerId, i) => (\n          <GameCell\n            id={i}\n            key={i}\n            onClick={() => onClick(i)}\n            content={playerId}\n          />\n        ))}\n      </div>\n    );\n}\n\nexport default GameBoard;"]},"metadata":{},"sourceType":"module"}