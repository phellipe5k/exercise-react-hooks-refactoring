{"ast":null,"code":"var _jsxFileName = \"/home/phellipe/Documentos/Trybe/Bloco 18/react-hooks-exercises/src/GameBoard.js\";\nimport React from 'react';\nimport GameCell from './GameCell';\nimport './GameBoard.css';\nimport TicTacToeContext from './context/TicTacToeContext';\n\nconst GameBoard = () => {\n  const {\n    game,\n    setGame\n  } = useContext(TicTacToeContextntext);\n\n  const toggleActivePlayer = () => {\n    const {\n      activePlayer\n    } = this.state;\n    if (activePlayer === 1) return 2;\n    return 1;\n  };\n\n  const onClick = cellClicked => {\n    const newState = [...game.gameBoard];\n    let newActivePlayer = game.activePlayer;\n\n    if (game.gameBoard[cellClicked] === 0) {\n      newState[cellClicked] = game.activePlayer;\n      newActivePlayer = toggleActivePlayer();\n    } else newState[cellClicked] = game.gameBoard[cellClicked];\n\n    setGame({\n      activePlayer: newActivePlayer,\n      gameBoard: newState\n    });\n  };\n\n  const {\n    gameState,\n    updateGame\n  } = this.props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"game-board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, gameState.map((playerId, i) => /*#__PURE__*/React.createElement(GameCell, {\n    id: i,\n    key: i,\n    onClick: () => onClick(i),\n    content: playerId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default GameBoard;","map":{"version":3,"sources":["/home/phellipe/Documentos/Trybe/Bloco 18/react-hooks-exercises/src/GameBoard.js"],"names":["React","GameCell","TicTacToeContext","GameBoard","game","setGame","useContext","TicTacToeContextntext","toggleActivePlayer","activePlayer","state","onClick","cellClicked","newState","gameBoard","newActivePlayer","gameState","updateGame","props","map","playerId","i"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,iBAAP;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAEtB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBC,UAAU,CAACC,qBAAD,CAApC;;AACA,QAAMC,kBAAkB,GAAG,MAAM;AAC/B,UAAM;AAAEC,MAAAA;AAAF,QAAmB,KAAKC,KAA9B;AACA,QAAID,YAAY,KAAK,CAArB,EAAwB,OAAO,CAAP;AACxB,WAAO,CAAP;AACD,GAJD;;AAMA,QAAME,OAAO,GAAIC,WAAD,IAAiB;AAC/B,UAAMC,QAAQ,GAAG,CAAC,GAAGT,IAAI,CAACU,SAAT,CAAjB;AACE,QAAIC,eAAe,GAAGX,IAAI,CAACK,YAA3B;;AAEA,QAAIL,IAAI,CAACU,SAAL,CAAeF,WAAf,MAAgC,CAApC,EAAuC;AACrCC,MAAAA,QAAQ,CAACD,WAAD,CAAR,GAAwBR,IAAI,CAACK,YAA7B;AACAM,MAAAA,eAAe,GAAGP,kBAAkB,EAApC;AACD,KAHD,MAGOK,QAAQ,CAACD,WAAD,CAAR,GAAwBR,IAAI,CAACU,SAAL,CAAeF,WAAf,CAAxB;;AACTP,IAAAA,OAAO,CACL;AACAI,MAAAA,YAAY,EAAEM,eADd;AAEAD,MAAAA,SAAS,EAAED;AAFX,KADK,CAAP;AAKD,GAbD;;AAeA,QAAM;AAAEG,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA4B,KAAKC,KAAvC;AACE,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,SAAS,CAACG,GAAV,CAAc,CAACC,QAAD,EAAWC,CAAX,kBACb,oBAAC,QAAD;AACE,IAAA,EAAE,EAAEA,CADN;AAEE,IAAA,GAAG,EAAEA,CAFP;AAGE,IAAA,OAAO,EAAE,MAAMV,OAAO,CAACU,CAAD,CAHxB;AAIE,IAAA,OAAO,EAAED,QAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF;AAYH,CArCD;;AAuCA,eAAejB,SAAf","sourcesContent":["import React from 'react';\nimport GameCell from './GameCell';\nimport './GameBoard.css';\nimport TicTacToeContext from './context/TicTacToeContext';\n\nconst GameBoard = () => {\n\n  const { game, setGame } = useContext(TicTacToeContextntext);\n  const toggleActivePlayer = () => {\n    const { activePlayer } = this.state;\n    if (activePlayer === 1) return 2;\n    return 1;\n  }\n\n  const onClick = (cellClicked) => {\n    const newState = [...game.gameBoard];\n      let newActivePlayer = game.activePlayer;\n\n      if (game.gameBoard[cellClicked] === 0) {\n        newState[cellClicked] = game.activePlayer;\n        newActivePlayer = toggleActivePlayer();\n      } else newState[cellClicked] = game.gameBoard[cellClicked];\n    setGame(\n      { \n      activePlayer: newActivePlayer,\n      gameBoard: newState, \n      })\n  }\n\n  const { gameState, updateGame } = this.props;\n    return (\n      <div className=\"game-board\">\n        {gameState.map((playerId, i) => (\n          <GameCell\n            id={i}\n            key={i}\n            onClick={() => onClick(i)}\n            content={playerId}\n          />\n        ))}\n      </div>\n    );\n}\n\nexport default GameBoard;"]},"metadata":{},"sourceType":"module"}